
/* This FLex file was machine-generated by the BNF converter */
%{
#include <string.h>
#include "Parser.H"
#define YY_BUFFER_LENGTH 4096
extern int yy_mylinenumber ;
static char YY_PARSED_STRING[YY_BUFFER_LENGTH];
static void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
static void YY_BUFFER_RESET(void)
{
  for(int x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>"::"      	 return _SYMB_0;
<YYINITIAL>"<"      	 return _SYMB_1;
<YYINITIAL>">"      	 return _SYMB_2;
<YYINITIAL>","      	 return _SYMB_3;
<YYINITIAL>"("      	 return _SYMB_4;
<YYINITIAL>")"      	 return _SYMB_5;
<YYINITIAL>":"      	 return _SYMB_6;
<YYINITIAL>"=>"      	 return _SYMB_7;
<YYINITIAL>"="      	 return _SYMB_8;
<YYINITIAL>"."      	 return _SYMB_9;
<YYINITIAL>"|"      	 return _SYMB_10;
<YYINITIAL>"<<"      	 return _SYMB_11;
<YYINITIAL>">>"      	 return _SYMB_12;
<YYINITIAL>"*"      	 return _SYMB_13;
<YYINITIAL>"/"      	 return _SYMB_14;
<YYINITIAL>"+"      	 return _SYMB_15;
<YYINITIAL>"-"      	 return _SYMB_16;
<YYINITIAL>"fn"      	 return _SYMB_17;
<YYINITIAL>"functor"      	 return _SYMB_18;
<YYINITIAL>"generic"      	 return _SYMB_19;
<YYINITIAL>"main"      	 return _SYMB_20;
<YYINITIAL>"namespace"      	 return _SYMB_21;
<YYINITIAL>"requires"      	 return _SYMB_22;
<YYINITIAL>"satisfies"      	 return _SYMB_23;

<YYINITIAL>"#"[^\n]*\n  ++yy_mylinenumber ; 	 /* BNFC single-line comment */;
<YYINITIAL>"#("      	 BEGIN COMMENT;
<COMMENT>")"      	 BEGIN YYINITIAL;
<COMMENT>.      	 /* BNFC multi-line comment */;
<COMMENT>[\n]   ++yy_mylinenumber ; 	 /* BNFC multi-line comment */;

<YYINITIAL>{CAPITAL}     	 yylval.string_ = strdup(yytext); return _SYMB_24;
<YYINITIAL>{CAPITAL}({LETTER}*|{DIGIT}*)*     	 yylval.string_ = strdup(yytext); return _SYMB_25;
<YYINITIAL>{SMALL}({SMALL}*|{DIGIT}*|\_*)*     	 yylval.string_ = strdup(yytext); return _SYMB_26;
<YYINITIAL>"\""      	 BEGIN STRING;
<STRING>\\      	 BEGIN ESCAPED;
<STRING>\"      	 yylval.string_ = strdup(YY_PARSED_STRING); YY_BUFFER_RESET(); BEGIN YYINITIAL; return _STRING_;
<STRING>.      	 YY_BUFFER_APPEND(yytext);
<ESCAPED>n      	 YY_BUFFER_APPEND("\n"); BEGIN STRING;
<ESCAPED>\"      	 YY_BUFFER_APPEND("\""); BEGIN STRING ;
<ESCAPED>\\      	 YY_BUFFER_APPEND("\\"); BEGIN STRING;
<ESCAPED>t       	 YY_BUFFER_APPEND("\t"); BEGIN STRING;
<ESCAPED>.       	 YY_BUFFER_APPEND(yytext); BEGIN STRING;
<YYINITIAL>"'" 	BEGIN CHAR;
<CHAR>\\      	 BEGIN CHARESC;
<CHAR>[^']      	 BEGIN CHAREND; yylval.char_ = yytext[0]; return _CHAR_;
<CHARESC>n      	 BEGIN CHAREND; yylval.char_ = '\n'; return _CHAR_;
<CHARESC>t      	 BEGIN CHAREND; yylval.char_ = '\t'; return _CHAR_;
<CHARESC>.      	 BEGIN CHAREND; yylval.char_ = yytext[0]; return _CHAR_;
<CHAREND>"'"      	 BEGIN YYINITIAL;
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval.double_ = atof(yytext); return _DOUBLE_;
<YYINITIAL>{DIGIT}+      	 yylval.int_ = atoi(yytext); return _INTEGER_;
\n  ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return _ERROR_;
%%
int initialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
int yywrap(void) { return 1; }

