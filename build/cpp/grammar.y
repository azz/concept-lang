/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  extern char *yytext;
  fprintf(stderr,"error: line %d: %s at %s\n", 
    yy_mylinenumber, str, yytext);
}



static Global* YY_RESULT_Global_ = 0;
Global* pGlobal(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Global_;
  }
}
Global* pGlobal(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Global_;
  }
}

static ListTopLevelBlock* YY_RESULT_ListTopLevelBlock_ = 0;
ListTopLevelBlock* pListTopLevelBlock(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTopLevelBlock_;
  }
}
ListTopLevelBlock* pListTopLevelBlock(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTopLevelBlock_;
  }
}

static TopLevelBlock* YY_RESULT_TopLevelBlock_ = 0;
TopLevelBlock* pTopLevelBlock(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TopLevelBlock_;
  }
}
TopLevelBlock* pTopLevelBlock(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TopLevelBlock_;
  }
}

static ListBlock* YY_RESULT_ListBlock_ = 0;
ListBlock* pListBlock(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListBlock_;
  }
}
ListBlock* pListBlock(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListBlock_;
  }
}

static NamespaceIdent* YY_RESULT_NamespaceIdent_ = 0;
NamespaceIdent* pNamespaceIdent(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NamespaceIdent_;
  }
}
NamespaceIdent* pNamespaceIdent(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_NamespaceIdent_;
  }
}

static ParamIdent* YY_RESULT_ParamIdent_ = 0;
ParamIdent* pParamIdent(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParamIdent_;
  }
}
ParamIdent* pParamIdent(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParamIdent_;
  }
}

static ListNamespaceIdent* YY_RESULT_ListNamespaceIdent_ = 0;
ListNamespaceIdent* pListNamespaceIdent(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListNamespaceIdent_;
  }
}
ListNamespaceIdent* pListNamespaceIdent(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListNamespaceIdent_;
  }
}

static ListGenericParameter* YY_RESULT_ListGenericParameter_ = 0;
ListGenericParameter* pListGenericParameter(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGenericParameter_;
  }
}
ListGenericParameter* pListGenericParameter(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGenericParameter_;
  }
}

static Type* YY_RESULT_Type_ = 0;
Type* pType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

static ParametricType* YY_RESULT_ParametricType_ = 0;
ParametricType* pParametricType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParametricType_;
  }
}
ParametricType* pParametricType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParametricType_;
  }
}

static ListType* YY_RESULT_ListType_ = 0;
ListType* pListType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}
ListType* pListType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}

static Block* YY_RESULT_Block_ = 0;
Block* pBlock(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Block_;
  }
}
Block* pBlock(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Block_;
  }
}

static ListFunctorDecl* YY_RESULT_ListFunctorDecl_ = 0;
ListFunctorDecl* pListFunctorDecl(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunctorDecl_;
  }
}
ListFunctorDecl* pListFunctorDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunctorDecl_;
  }
}

static FunctorDecl* YY_RESULT_FunctorDecl_ = 0;
FunctorDecl* pFunctorDecl(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctorDecl_;
  }
}
FunctorDecl* pFunctorDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctorDecl_;
  }
}

static FunctorSpec* YY_RESULT_FunctorSpec_ = 0;
FunctorSpec* pFunctorSpec(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctorSpec_;
  }
}
FunctorSpec* pFunctorSpec(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctorSpec_;
  }
}

static FnDecl* YY_RESULT_FnDecl_ = 0;
FnDecl* pFnDecl(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FnDecl_;
  }
}
FnDecl* pFnDecl(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FnDecl_;
  }
}

static ListFormalArgument* YY_RESULT_ListFormalArgument_ = 0;
ListFormalArgument* pListFormalArgument(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFormalArgument_;
  }
}
ListFormalArgument* pListFormalArgument(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFormalArgument_;
  }
}

static FormalArgument* YY_RESULT_FormalArgument_ = 0;
FormalArgument* pFormalArgument(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FormalArgument_;
  }
}
FormalArgument* pFormalArgument(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FormalArgument_;
  }
}

static InformalParam* YY_RESULT_InformalParam_ = 0;
InformalParam* pInformalParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_InformalParam_;
  }
}
InformalParam* pInformalParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_InformalParam_;
  }
}

static ListInformalParam* YY_RESULT_ListInformalParam_ = 0;
ListInformalParam* pListInformalParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListInformalParam_;
  }
}
ListInformalParam* pListInformalParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListInformalParam_;
  }
}

static ListStatement* YY_RESULT_ListStatement_ = 0;
ListStatement* pListStatement(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}
ListStatement* pListStatement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}

static Expression* YY_RESULT_Expression_ = 0;
Expression* pExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}
Expression* pExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}

static Statement* YY_RESULT_Statement_ = 0;
Statement* pStatement(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}
Statement* pStatement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Global* global_;
  ListTopLevelBlock* listtoplevelblock_;
  TopLevelBlock* toplevelblock_;
  ListBlock* listblock_;
  NamespaceIdent* namespaceident_;
  ParamIdent* paramident_;
  ListNamespaceIdent* listnamespaceident_;
  ListGenericParameter* listgenericparameter_;
  Type* type_;
  ParametricType* parametrictype_;
  ListType* listtype_;
  Block* block_;
  ListFunctorDecl* listfunctordecl_;
  FunctorDecl* functordecl_;
  FunctorSpec* functorspec_;
  FnDecl* fndecl_;
  ListFormalArgument* listformalargument_;
  FormalArgument* formalargument_;
  InformalParam* informalparam_;
  ListInformalParam* listinformalparam_;
  ListStatement* liststatement_;
  Expression* expression_;
  Statement* statement_;
}

%token _ERROR_
%token _SYMB_0    //   ::
%token _SYMB_1    //   <
%token _SYMB_2    //   >
%token _SYMB_3    //   ,
%token _SYMB_4    //   (
%token _SYMB_5    //   )
%token _SYMB_6    //   :
%token _SYMB_7    //   =>
%token _SYMB_8    //   =
%token _SYMB_9    //   .
%token _SYMB_10    //   |
%token _SYMB_11    //   <<
%token _SYMB_12    //   >>
%token _SYMB_13    //   *
%token _SYMB_14    //   /
%token _SYMB_15    //   +
%token _SYMB_16    //   -
%token _SYMB_17    //   fn
%token _SYMB_18    //   functor
%token _SYMB_19    //   generic
%token _SYMB_20    //   main
%token _SYMB_21    //   namespace
%token _SYMB_22    //   requires
%token _SYMB_23    //   satisfies
%token<string_> _SYMB_24    //   GenericParameter
%token<string_> _SYMB_25    //   UpperIdent
%token<string_> _SYMB_26    //   LowerIdent

%type <global_> Global
%type <listtoplevelblock_> ListTopLevelBlock
%type <toplevelblock_> TopLevelBlock
%type <listblock_> ListBlock
%type <namespaceident_> NamespaceIdent
%type <paramident_> ParamIdent
%type <listnamespaceident_> ListNamespaceIdent
%type <listgenericparameter_> ListGenericParameter
%type <type_> Type
%type <parametrictype_> ParametricType
%type <listtype_> ListType
%type <block_> Block
%type <listfunctordecl_> ListFunctorDecl
%type <functordecl_> FunctorDecl
%type <functorspec_> FunctorSpec
%type <fndecl_> FnDecl
%type <listformalargument_> ListFormalArgument
%type <formalargument_> FormalArgument
%type <informalparam_> InformalParam
%type <listinformalparam_> ListInformalParam
%type <liststatement_> ListStatement
%type <expression_> Expression
%type <expression_> Expression1
%type <expression_> Expression2
%type <expression_> Expression3
%type <expression_> Expression4
%type <expression_> Expression5
%type <statement_> Statement

%start Global
%token<string_> _STRING_
%token<char_> _CHAR_
%token<int_> _INTEGER_
%token<double_> _DOUBLE_

%%
Global : ListTopLevelBlock {  $$ = new TopLevel($1); YY_RESULT_Global_= $$; } 
;
ListTopLevelBlock : /* empty */ {  $$ = new ListTopLevelBlock();  } 
  | ListTopLevelBlock TopLevelBlock {  $1->push_back($2) ; $$ = $1 ;  }
;
TopLevelBlock : Block {  $$ = new BlockAtTop($1);  } 
  | _SYMB_4 _SYMB_20 FnDecl _SYMB_5 {  $$ = new Main($3);  }
;
ListBlock : /* empty */ {  $$ = new ListBlock();  } 
  | ListBlock Block {  $1->push_back($2) ; $$ = $1 ;  }
;
NamespaceIdent : _SYMB_25 {  $$ = new NamespaceIdentUpperIdent($1);  } 
  | _SYMB_26 {  $$ = new NamespaceIdentLowerIdent($1);  }
;
ParamIdent : _SYMB_25 {  $$ = new ParamIdentUpperIdent($1);  } 
  | _SYMB_26 {  $$ = new ParamIdentLowerIdent($1);  }
;
ListNamespaceIdent : NamespaceIdent {  $$ = new ListNamespaceIdent() ; $$->push_back($1);  } 
  | NamespaceIdent _SYMB_0 ListNamespaceIdent {  $3->push_back($1) ; $$ = $3 ;  }
;
ListGenericParameter : _SYMB_24 {  $$ = new ListGenericParameter() ; $$->push_back($1);  } 
  | _SYMB_24 ListGenericParameter {  $2->push_back($1) ; $$ = $2 ;  }
;
Type : _SYMB_24 {  $$ = new GenericPlaceholder($1);  } 
  | _SYMB_25 {  $$ = new BaseType($1);  }
  | _SYMB_25 ParametricType {  $$ = new GenericType($1, $2);  }
;
ParametricType : _SYMB_1 Type _SYMB_2 {  $$ = new Parameter($2);  } 
;
ListType : Type {  $$ = new ListType() ; $$->push_back($1);  } 
  | Type _SYMB_3 ListType {  $3->push_back($1) ; $$ = $3 ;  }
;
Block : _SYMB_4 _SYMB_5 {  $$ = new NoOp();  } 
  | _SYMB_4 _SYMB_21 ListNamespaceIdent ListBlock _SYMB_5 {  std::reverse($3->begin(),$3->end()) ;$$ = new Namespace($3, $4);  }
  | _SYMB_4 _SYMB_18 _SYMB_26 ListFunctorDecl _SYMB_5 {  std::reverse($4->begin(),$4->end()) ;$$ = new Functor($3, $4);  }
;
ListFunctorDecl : FunctorDecl {  $$ = new ListFunctorDecl() ; $$->push_back($1);  } 
  | FunctorDecl ListFunctorDecl {  $2->push_back($1) ; $$ = $2 ;  }
;
FunctorDecl : _SYMB_4 FunctorSpec _SYMB_5 {  $$ = new FunctorComponent($2);  } 
;
FunctorSpec : _SYMB_19 ListGenericParameter {  std::reverse($2->begin(),$2->end()) ;$$ = new Generic($2);  } 
  | _SYMB_23 ListType {  std::reverse($2->begin(),$2->end()) ;$$ = new Satisfies($2);  }
  | _SYMB_22 ListType {  std::reverse($2->begin(),$2->end()) ;$$ = new Requires($2);  }
  | _SYMB_17 FnDecl {  $$ = new Fn($2);  }
;
FnDecl : _SYMB_4 ListFormalArgument _SYMB_5 ListStatement {  std::reverse($2->begin(),$2->end()) ;$$ = new FnParams($2, $4);  } 
;
ListFormalArgument : /* empty */ {  $$ = new ListFormalArgument();  } 
  | FormalArgument {  $$ = new ListFormalArgument() ; $$->push_back($1);  }
  | FormalArgument _SYMB_3 ListFormalArgument {  $3->push_back($1) ; $$ = $3 ;  }
;
FormalArgument : ParamIdent _SYMB_6 Type {  $$ = new ValueParam($1, $3);  } 
  | ParamIdent _SYMB_6 ListFormalArgument _SYMB_7 Type {  std::reverse($3->begin(),$3->end()) ;$$ = new GenericParam($1, $3, $5);  }
;
InformalParam : Expression {  $$ = new FnCallExpr($1);  } 
;
ListInformalParam : /* empty */ {  $$ = new ListInformalParam();  } 
  | InformalParam {  $$ = new ListInformalParam() ; $$->push_back($1);  }
  | InformalParam _SYMB_3 ListInformalParam {  $3->push_back($1) ; $$ = $3 ;  }
;
ListStatement : /* empty */ {  $$ = new ListStatement();  } 
  | ListStatement Statement {  $1->push_back($2) ; $$ = $1 ;  }
;
Expression : Expression1 {  $$ = $1;  } 
  | ParamIdent {  $$ = new ValueOrRef($1);  }
  | _INTEGER_ {  $$ = new IntLiteral($1);  }
  | _DOUBLE_ {  $$ = new RealLiteral($1);  }
  | _STRING_ {  $$ = new StringLiteral($1);  }
  | _CHAR_ {  $$ = new CharLiteral($1);  }
  | _SYMB_4 _SYMB_17 FnDecl _SYMB_5 {  $$ = new FnLiteral($3);  }
  | Expression _SYMB_9 Expression {  $$ = new DotOperator($1, $3);  }
  | Expression _SYMB_10 Expression {  $$ = new PipeOperator($1, $3);  }
  | Expression _SYMB_4 ListInformalParam _SYMB_5 {  std::reverse($3->begin(),$3->end()) ;$$ = new CallOperator($1, $3);  }
  | Expression _SYMB_11 Expression {  $$ = new LeftShiftOperator($1, $3);  }
  | Expression _SYMB_12 Expression {  $$ = new RightShiftOperator($1, $3);  }
  | Expression _SYMB_13 Expression {  $$ = new MultOperator($1, $3);  }
  | Expression _SYMB_14 Expression {  $$ = new DivisionOperator($1, $3);  }
  | Expression _SYMB_15 Expression {  $$ = new PlusOperator($1, $3);  }
  | Expression _SYMB_16 Expression {  $$ = new MinusOperator($1, $3);  }
;
Expression1 : Expression2 {  $$ = $1;  } 
;
Expression2 : Expression3 {  $$ = $1;  } 
;
Expression3 : Expression4 {  $$ = $1;  } 
;
Expression4 : Expression5 {  $$ = $1;  } 
;
Expression5 : _SYMB_4 Expression _SYMB_5 {  $$ = $2;  } 
;
Statement : FormalArgument {  $$ = new Declaration($1);  } 
  | Expression {  $$ = new Expr($1);  }
  | Expression _SYMB_8 Expression {  $$ = new Assignment($1, $3);  }
;

