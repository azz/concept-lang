module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transGenericParameter :: GenericParameter -> Result
transGenericParameter x = case x of
  GenericParameter string -> failure x
transUpperIdent :: UpperIdent -> Result
transUpperIdent x = case x of
  UpperIdent string -> failure x
transLowerIdent :: LowerIdent -> Result
transLowerIdent x = case x of
  LowerIdent string -> failure x
transGlobal :: Global -> Result
transGlobal x = case x of
  TopLevel toplevelblocks -> failure x
transTopLevelBlock :: TopLevelBlock -> Result
transTopLevelBlock x = case x of
  BlockAtTop block -> failure x
  Main fndecl -> failure x
transNamespaceIdent :: NamespaceIdent -> Result
transNamespaceIdent x = case x of
  NamespaceIdentUpperIdent upperident -> failure x
  NamespaceIdentLowerIdent lowerident -> failure x
transParamIdent :: ParamIdent -> Result
transParamIdent x = case x of
  ParamIdentUpperIdent upperident -> failure x
  ParamIdentLowerIdent lowerident -> failure x
transType :: Type -> Result
transType x = case x of
  GenericPlaceholder genericparameter -> failure x
  BaseType upperident -> failure x
  GenericType upperident parametrictype -> failure x
transParametricType :: ParametricType -> Result
transParametricType x = case x of
  Parameter type_ -> failure x
transBlock :: Block -> Result
transBlock x = case x of
  NoOp -> failure x
  Namespace namespaceidents blocks -> failure x
  Functor lowerident functordecls -> failure x
transFunctorDecl :: FunctorDecl -> Result
transFunctorDecl x = case x of
  FunctorComponent functorspec -> failure x
transFunctorSpec :: FunctorSpec -> Result
transFunctorSpec x = case x of
  Generic genericparameters -> failure x
  Satisfies types -> failure x
  Requires types -> failure x
  Fn fndecl -> failure x
transFnDecl :: FnDecl -> Result
transFnDecl x = case x of
  FnParams formalarguments statements -> failure x
transFormalArgument :: FormalArgument -> Result
transFormalArgument x = case x of
  ValueParam paramident type_ -> failure x
  GenericParam paramident formalarguments type_ -> failure x
transInformalParam :: InformalParam -> Result
transInformalParam x = case x of
  FnCallExpr expression -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  ValueOrRef paramident -> failure x
  IntLiteral integer -> failure x
  RealLiteral double -> failure x
  StringLiteral string -> failure x
  CharLiteral char -> failure x
  FnLiteral fndecl -> failure x
  DotOperator expression1 expression2 -> failure x
  PipeOperator expression1 expression2 -> failure x
  CallOperator expression informalparams -> failure x
  LeftShiftOperator expression1 expression2 -> failure x
  RightShiftOperator expression1 expression2 -> failure x
  MultOperator expression1 expression2 -> failure x
  DivisionOperator expression1 expression2 -> failure x
  PlusOperator expression1 expression2 -> failure x
  MinusOperator expression1 expression2 -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  Declaration formalargument -> failure x
  Expr expression -> failure x
  Assignment expression1 expression2 -> failure x

