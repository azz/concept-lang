

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype GenericParameter = GenericParameter String
  deriving (Eq, Ord, Show, Read)
newtype UpperIdent = UpperIdent String
  deriving (Eq, Ord, Show, Read)
newtype LowerIdent = LowerIdent String
  deriving (Eq, Ord, Show, Read)
data Global = TopLevel [TopLevelBlock]
  deriving (Eq, Ord, Show, Read)

data TopLevelBlock = BlockAtTop Block | Main FnDecl
  deriving (Eq, Ord, Show, Read)

data NamespaceIdent
    = NamespaceIdentUpperIdent UpperIdent
    | NamespaceIdentLowerIdent LowerIdent
  deriving (Eq, Ord, Show, Read)

data ParamIdent
    = ParamIdentUpperIdent UpperIdent | ParamIdentLowerIdent LowerIdent
  deriving (Eq, Ord, Show, Read)

data Type
    = GenericPlaceholder GenericParameter
    | BaseType UpperIdent
    | GenericType UpperIdent ParametricType
  deriving (Eq, Ord, Show, Read)

data ParametricType = Parameter Type
  deriving (Eq, Ord, Show, Read)

data Block
    = NoOp
    | Namespace [NamespaceIdent] [Block]
    | Functor LowerIdent [FunctorDecl]
  deriving (Eq, Ord, Show, Read)

data FunctorDecl = FunctorComponent FunctorSpec
  deriving (Eq, Ord, Show, Read)

data FunctorSpec
    = Generic [GenericParameter]
    | Satisfies [Type]
    | Requires [Type]
    | Fn FnDecl
  deriving (Eq, Ord, Show, Read)

data FnDecl = FnParams [FormalArgument] [Statement]
  deriving (Eq, Ord, Show, Read)

data FormalArgument
    = ValueParam ParamIdent Type
    | GenericParam ParamIdent [FormalArgument] Type
  deriving (Eq, Ord, Show, Read)

data InformalParam = FnCallExpr Expression
  deriving (Eq, Ord, Show, Read)

data Expression
    = ValueOrRef ParamIdent
    | IntLiteral Integer
    | RealLiteral Double
    | StringLiteral String
    | CharLiteral Char
    | FnLiteral FnDecl
    | DotOperator Expression Expression
    | PipeOperator Expression Expression
    | CallOperator Expression [InformalParam]
    | LeftShiftOperator Expression Expression
    | RightShiftOperator Expression Expression
    | MultOperator Expression Expression
    | DivisionOperator Expression Expression
    | PlusOperator Expression Expression
    | MinusOperator Expression Expression
  deriving (Eq, Ord, Show, Read)

data Statement
    = Declaration FormalArgument
    | Expr Expression
    | Assignment Expression Expression
  deriving (Eq, Ord, Show, Read)

